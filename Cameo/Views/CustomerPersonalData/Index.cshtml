@model Cameo.ViewModels.CustomerEditVM
@using Cameo.Common

@using Microsoft.Extensions.Options;

@inject IOptions<AppConfiguration> AppSettings

@{
    ViewData["Title"] = localizer["PersonalData"];
    Layout = "~/Views/Shared/_LayoutDaven.cshtml";
}

@*<br />*@
<div class="row bg-color ptb_md--60">
    <div class="plr--80 plr_lg--50 plr_md--50 plr_sm--40" style="width: 100%;">
        <div class="row">
            @*<div class="col-lg-2"></div>*@
            <div class="col-lg-4 mt--30">
                <partial name="_CustomerSidebarDaven" />
            </div>
            <div class="col-lg-8 mt--30 mb--30">
                <h2>@ViewData["Title"]</h2>

                @if (ViewData["successfullySaved"] != null)
                {
                    <div class="alert alert-success">
                        @localizer["SuccessDataSaved"]
                    </div>
                }

                <!-- Start Contact Form -->
                <div class="draven-contact-form">
                    <div class="container p-0">
                        <div class="row">
                            <div class="col-12">
                                <div class="contact-form-wrapper">
                                    <!-- Start Contact Wrapper -->
                                    <div class="contact__form--1">
                                        <!-- Enrolment form -->
                                        <form method="post">
                                            <div asp-validation-summary="All" class="text-danger"></div>
                                            <div class="row">
                                                <div class="col-lg-12 mt--20">
                                                    <input asp-for="ID" type="hidden" />
                                                    <input type="hidden" id="fileID" name="fileID" />

                                                    <!-- Start Single Team -->
                                                    <div class="col-lg-4 col-md-6 col-sm-6 p-0">
                                                        <div class="team team__style--4 text-center">
                                                            <div class="thumbnail2">
                                                                <img id="imgContainer" src="@Model.Avatar.Url" alt="Avatar">
                                                                <i id="spinner" class="spinner fa fa-circle-o-notch fa-spin fa-2x fa-fw" style="display: none;"></i>
                                                                @*<img id="spinner" src="@AppSettings.Value.SpinnerUrl" style="display: none; height:100px;" />*@
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-4 col-md-6 col-sm-6 mt--10 p-0 text-center">
                                                        @*<a class="button-link button-size__8 button__transparent--border--dashed" href="javascript: void(0);"><span class="icon-left"><i class="dlicon ui-1_zoom-split"></i></span><span class="button-text">Редактировать фото</span></a>*@
                                                        <label for="imgInp" class="button-link button-size__8 button__transparent--border--dashed" style="cursor:pointer;"><span class="icon-left">@*<i class="dlicon ui-1_zoom-split"></i>*@</span> <span class="button-text"><u>@localizer["EditPhoto"]</u></span></label>
                                                        <input type='file' id="imgInp" style="display: none;"/>
                                                    </div>
                                                    <!-- End Single Team -->
                                                </div>
                                                <div class="col-lg-12 mt--20">
                                                    <input asp-for="FullName" type="text" placeholder="@Html.DisplayNameFor(m => m.FullName) *">
                                                    <span asp-validation-for="FullName" class="text-danger"></span>
                                                </div>
                                                <div class="col-lg-12 mt--20">
                                                    <textarea asp-for="Bio" type="text" placeholder="@Html.DisplayNameFor(m => m.Bio)"></textarea>
                                                    <span asp-validation-for="Bio" class="text-danger"></span>
                                                </div>
                                                <div class="col-lg-12 mt--20">
                                                    <button type="submit" class="button-link button-size__xl button__black" style="width: 100%">
                                                        <span class="button-text">@localizer["Save"]</span>
                                                    </button>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End Contact Form -->
            </div>
            @*<div class="col-lg-2"></div>*@
        </div>
    </div>
</div>

<style>
    ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
        color: #d3d3d3;
        opacity: 1; /* Firefox */
    }

    :-ms-input-placeholder { /* Internet Explorer 10-11 */
        color: #d3d3d3;
    }

    ::-ms-input-placeholder { /* Microsoft Edge */
        color: #d3d3d3;
    }

    select {
        font-size: 18px;
        padding: 25px;
        border-style: solid;
        border-width: 1px;
        border-color: #d4d4d4;
        width: 100%;
        line-height: inherit;
        height: auto;
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/FileAjaxUpload.js"></script>

    <script>
        var input;
        var modelID = @Model.ID;
        var fileType = "@Constants.FileTypes.CUSTOMER_AVATAR";
        var spinnerTagID = "spinner";
        var imgPreviewContainerTagID = "imgContainer";

        $(document).ready(function () {
            $("#imgInp").change(function ()
            {
                $("#" + spinnerTagID).show();
                var input = this;
                if (!(input.files && input.files[0]))
                {
                    $("#" + spinnerTagID).hide();
                    return;
                }

                var file = input.files[0];

                resize(file);
            });
        });

        function resize(file)
        {
            //define the width to resize e.g 400px
            var resize_width = 400;//without px

            //get the image selected
            //var file = document.querySelector('#uploader').files[0];

            //create a FileReader
            var reader = new FileReader();

            //image turned to base64-encoded Data URI.
            reader.readAsDataURL(file);
            reader.name = file.name;//get the image's name
            reader.size = file.size; //get the image's size
            reader.onload = function (event)
            {
                var img = new Image();//create a image
                img.src = event.target.result;//result is base64-encoded Data URI
                img.name = event.target.name;//set name (optional)
                img.size = event.target.size;//set size (optional)
                img.onload = function (el)
                {
                    var elem = document.createElement('canvas');//create a canvas

                    //scale the image to 600 (width) and keep aspect ratio
                    var scaleFactor = resize_width / el.target.width;
                    elem.width = resize_width;
                    elem.height = el.target.height * scaleFactor;

                    //draw in canvas
                    var ctx = elem.getContext('2d');
                    ctx.drawImage(el.target, 0, 0, elem.width, elem.height);

                    //get the base64-encoded Data URI from the resize image
                    var srcEncoded = ctx.canvas.toDataURL(el.target, 'image/jpeg', 0);

                    //assign it to thumb src
                    //document.querySelector('#image').src = srcEncoded;

                    /*Now you can send "srcEncoded" to the server and
                    convert it to a png o jpg. Also can send
                    "el.target.name" that is the file's name.*/

                    HandleUploadTask(file, srcEncoded);
                }
            }
        }

        function HandleUploadTask(file, srcEncoded)
        {
            var extension = file.name.split('.')[1];
            extension = "jpg";

            // Create a root reference
            var storageRef = firebase.storage().ref();
            //var uploadTask = storageRef.child('@ViewBag.firebaseUid' + '/avatar.' + extension).put(file);
            var uploadTask = storageRef.child('@ViewBag.firebaseUid' + '/avatar.' + extension).putString(srcEncoded, 'data_url');

            // Listen for state changes, errors, and completion of the upload.
            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                function (snapshot)
                {
                    //// Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    //var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    //console.log('Upload is ' + progress + '% done');
                    //switch (snapshot.state)
                    //{
                    //    case firebase.storage.TaskState.PAUSED: // or 'paused'
                    //        console.log('Upload is paused');
                    //        break;
                    //    case firebase.storage.TaskState.RUNNING: // or 'running'
                    //        console.log('Upload is running');
                    //        break;
                    //}
                }, function (error)
                {
                    $("#" + spinnerTagID).hide();
                    console.log(error);

                }, function ()
                {
                    // Upload completed successfully, now we can get the download URL
                    var attachment = {
                        Filename: "",
                        Path: "",
                        Size: 0,
                        ContentType: "",
                        DownloadUrl: "",
                        FileType: fileType,
                        ModelID: @Model.ID
                    };
                    //console.log(uploadTask.snapshot.ref);
                        

                    uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                    {
                        //console.log(metaData);

                        attachment.Filename = metaData.name;
                        attachment.Path = metaData.fullPath;
                        attachment.Size = metaData.size;
                        attachment.ContentType = metaData.contentType;

                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                        {
                            attachment.DownloadUrl = downloadURL;

                            //console.log(attachment);
                            FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID);
                        });
                    });
                });
        }

        function FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID)
        {
            if (file)
            {
                //console.log(attachment);
                $.ajax({
                    url: "/Attachment/Save",
                    data: JSON.stringify(attachment),
                    processData: false,
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    //dataType: "json",
                    beforeSend: function ()
                    {
                        //alert("beforeSend");
                        //$("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $(input).attr("disabled", "disabled");
                    },
                    success: function (data)
                    {
                        if (imgPreviewContainerTagID != undefined
                            || imgPreviewContainerTagID != null
                            || imgPreviewContainerTagID != "")
                        {
                            var reader = new FileReader();
                            reader.onload = function (e)
                            {
                                $("#" + imgPreviewContainerTagID).attr('src', e.target.result);
                            }
                            reader.readAsDataURL(file);
                        }
                        else
                        {
                            alert("File uploaded!");
                        }
                    },
                    error: function (data)
                    {
                        alert("Error!");
                    },
                    complete: function ()
                    {
                        $("#" + spinnerTagID).hide();
                        $(input).removeAttr("disabled");
                    }
                });
            }
        }
    </script>
}