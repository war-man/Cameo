@model Cameo.ViewModels.VideoRequestDetailsVM
@using Cameo.Common

@using Microsoft.Extensions.Options;

@inject IOptions<AppConfiguration> AppSettings

@{
    ViewData["Title"] = localizer["OrderDetails"] + " #" + Model.RequestNumber;
    Layout = "~/Views/Shared/_LayoutDaven.cshtml";
}

<div class="row bg-color ptb_md--60 ptb_sm--60">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 mt--30">
                <!-- Start Single Blog -->
                <div class="blog blog_style--1">
                    <div class="inner">
                        @if (Model.PaymentIsConfirmed)
                        {
                        <h3 class="fontWeight600 heading-bg__solid text-white">
                            @localizer["VideoIsReady"]
                            <a href="/video/details/@Model.ID" >
                                <span class="button-text"><u>@localizer["Watch"]</u></span>
                            </a>
                        </h3>
                            @*<h2>
                                Ваше видео готово! 
                                <a class="button-link button-size button__black" href="#">
                                    <span class="button-text">Смотреть</span>
                                    <span class="icon-right"><i class="dlicon objects_support-17"></i></span>
                                </a>
                            </h2>*@
                        }
                        
                        <h4 class="fontWeight600 font-2 heading-divider heading-divider__themeColor  mb--15 mt--10 font--32">@ViewData["Title"]</h4>
                        <dl class="dl-horizontal font--16 mb--35">
                            @*<dt>
                                    @Html.DisplayNameFor(model => model.ID)
                                </dt>
                                <dd>
                                    @Html.DisplayFor(model => model.ID)
                                </dd>*@
                            <dt>
                                @Html.DisplayNameFor(model => model.Talent)
                            </dt>
                            <dd>
                                <a href="/talents/details/@Model.Talent.Username">@Model.Talent.FullName</a>
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.To)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.To)
                            </dd>
                            @if (!string.IsNullOrWhiteSpace(Model.From))
                            {
                                <dt>
                                    @Html.DisplayNameFor(model => model.From)
                                </dt>
                                <dd>
                                    @Html.DisplayFor(model => model.From)
                                </dd>
                            }

                            <dt>
                                @Html.DisplayNameFor(model => model.Instructions)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Instructions)
                            </dd>
                            @*<dt>
                                    @Html.DisplayNameFor(model => model.Email)
                                </dt>
                                <dd>
                                    @Html.DisplayFor(model => model.Email)
                                </dd>*@
                            <dt>
                                @*@Html.DisplayNameFor(model => model.IsNotPublic)*@
                            </dt>
                            <dd>
                                @if (Model.IsNotPublic)
                                {
                                    <small><i>@localizer["VideoIsHidden"]</i></small>
                                }
                                @*@Html.DisplayFor(model => model.IsNotPublic)*@
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Price)
                            </dt>
                            <dd>
                                @Model.PriceStr сум<br />
                                <small><i>@localizer["OrderPrize"]: @Model.RequestPriceStr @localizer["UZS"]</i></small><br />
                                <small><i>@localizer["OrderRemainingPrize"]: @Model.RemainingPriceStr @localizer["UZS"]</i></small>
                            </dd>

                            @*<dt>
                                    @Html.DisplayNameFor(model => model.Status.ID)
                                </dt>
                                <dd>
                                    @Html.DisplayFor(model => model.Status.ID)
                                </dd>*@
                            <dt>
                                @Html.DisplayNameFor(model => model.Status)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Status.Name)
                                @if (Model.VideoIsConfirmed || Model.PaymentScreenshotIsUploaded)
                                {
                                    <div class="alert alert-info">
                                        <p>@localizer["PaymentScreenshotUploadText1"] (@Model.RemainingPriceStr @localizer["UZS"])</p>
                                        <p><b>@Model.Talent.CreditCardNumber<br />@Model.Talent.CreditCardHolder</b></p>
                                        <p>
                                            @localizer["PaymentScreenshotUploadText2"]
                                            <br />

                                            <!-- Start Single Team -->
                                            <div class="col-lg-4 col-md-6 col-sm-6 p-0">
                                                <div class="team team__style--1 text-center">
                                                    <div class="thumbnail">
                                                        @{
                                                            string imgContainerDisplay = "none;";
                                                            if (Model.PaymentScreenshot != null && Model.PaymentScreenshot.ID > 0)
                                                            {
                                                                imgContainerDisplay = "block;";
                                                            }
                                                        }
                                                        <img id="imgContainer" src="@Model.PaymentScreenshot.Url" alt="Avatar" style="display:@imgContainerDisplay">
                                                        <i id="spinner" class="spinner fa fa-circle-o-notch fa-spin fa-2x fa-fw" style="display: none;"></i>
                                                        @*<img id="spinner" src="@AppSettings.Value.SpinnerUrl" style="display: none; height:100px;" />*@
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-4 col-md-6 col-sm-6 mt--10 p-0 text-center">
                                                @*<a class="button-link button-size__8 button__transparent--border--dashed" href="javascript: void(0);"><span class="icon-left"><i class="dlicon ui-1_zoom-split"></i></span><span class="button-text">Редактировать фото</span></a>*@
                                                @{
                                                    string uploadText = localizer["UploadScreenshot"];
                                                    if (Model.PaymentScreenshot != null && Model.PaymentScreenshot.ID > 0)
                                                    {
                                                        uploadText = localizer["UploadAnotherScreenshot"];
                                                    }
                                                }
                                                <label for="imgInp" class="button-link button-size__8 button__transparent--border--dashed" style="cursor:pointer;"><span class="icon-left"><i class="fa fa-upload"></i></span> <span class="button-text"><u>@uploadText</u></span></label>
                                                <input type='file' id="imgInp" style="display: none;" />
                                            </div>
                                            <!-- End Single Team -->
                                        </p>
                                    </div>
                                }
                            </dd>

                            @if (!string.IsNullOrWhiteSpace(Model.Deadline))
                            {
                                <dt>
                                    @Html.DisplayNameFor(model => model.Deadline)
                                </dt>
                                <dd>
                                    @Html.DisplayFor(model => model.Deadline)
                                </dd>
                            }
                        </dl>
                        @*<p class="font--16 mb--35">All the rumors have finally died down and many skeptics have tightened their lips, the iPod does support video format now on its fifth generation.</p>*@
                        <div class="blog-btn">
                            @if (Model.EditBtnIsAvailable)
                            {
                                <a class="button-link button-size__lg button__transparent--border" href="/VideoRequest/Edit/@Model.ID"><span class="button-text__13">@localizer["Edit"]</span> </a>
                            }

                            @if (Model.EditBtnIsAvailable)
                            {
                                <button type="button" class="btn btn-link" onclick="CancelRequest(@Model.ID);">@localizer["Cancel"]</button>
                            }
                        </div>
                    </div>
                </div>
                <!-- End Single Blog -->

                @*@if (Model.VideoIsPaid)
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <p>Запрос завершен - <a href="/Video/Details/@Model.ID">Перейти к видео</a></p>
                        </div>
                    </div>
                    <br />
                }*@

                @*<div class="row">
                        <div class="col-sm-12">
                            @if (Model.Payable)
                            {
                                <b>Видео готово!</b> <button type="button" class="btn btn-success btn-sm" onclick="MakePayment(@Model.ID);">Оплатить!</button>
                            }
                        </div>
                    </div>*@
            </div>
            <div class="col-lg-6 mt--30 mb--30">
                <partial name="_OrderStepsClarification" />
            </div>
        </div>
        <div class="row mt--30">
            <div class="col-12">
                @*<a asp-action="Index">Back to List</a>*@
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        var input;
        var modelID = @Model.ID;
        var fileType = "@Constants.FileTypes.VIDEO_REQUEST_PAYMENT_SCREENSHOT";
        var spinnerTagID = "spinner";
        var imgPreviewContainerTagID = "imgContainer";

        $(document).ready(function () {
            $("#imgInp").change(function ()
            {
                $("#" + spinnerTagID).show();
                var input = this;
                if (!(input.files && input.files[0]))
                {
                    $("#" + spinnerTagID).hide();
                    return;
                }

                var file = input.files[0];

                resize(file);


                @*// Create a root reference
                var storageRef = firebase.storage().ref();
                var uploadTask = storageRef.child('@ViewBag.firebaseUid' + '/requestPaymentConfirmation_' + modelID + '.' + extension).put(file);

                // Listen for state changes, errors, and completion of the upload.
                uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                    function (snapshot)
                    {
                        //// Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                        //var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        //console.log('Upload is ' + progress + '% done');
                        //switch (snapshot.state)
                        //{
                        //    case firebase.storage.TaskState.PAUSED: // or 'paused'
                        //        console.log('Upload is paused');
                        //        break;
                        //    case firebase.storage.TaskState.RUNNING: // or 'running'
                        //        console.log('Upload is running');
                        //        break;
                        //}
                    }, function (error)
                    {
                        console.log(error);

                    }, function ()
                    {
                        // Upload completed successfully, now we can get the download URL
                        var attachment = {
                            Filename: "",
                            Path: "",
                            Size: 0,
                            ContentType: "",
                            DownloadUrl: "",
                            FileType: fileType,
                            ModelID: @Model.ID
                        };
                        //console.log(uploadTask.snapshot.ref);


                        uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                        {
                            //console.log(metaData);

                            attachment.Filename = metaData.name;
                            attachment.Path = metaData.fullPath;
                            attachment.Size = metaData.size;
                            attachment.ContentType = metaData.contentType;

                            uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                            {
                                attachment.DownloadUrl = downloadURL;

                                //console.log(attachment);
                                FileAjaxUpload2(this, file, attachment, spinnerTagID, imgPreviewContainerTagID);
                            });
                        });
                    });*@
            });
        });

        function resize(file)
        {
            //define the width to resize e.g 400px
            var resize_width = 400;//without px

            //get the image selected
            //var file = document.querySelector('#uploader').files[0];

            //create a FileReader
            var reader = new FileReader();

            //image turned to base64-encoded Data URI.
            reader.readAsDataURL(file);
            reader.name = file.name;//get the image's name
            reader.size = file.size; //get the image's size
            reader.onload = function (event)
            {
                var img = new Image();//create a image
                img.src = event.target.result;//result is base64-encoded Data URI
                img.name = event.target.name;//set name (optional)
                img.size = event.target.size;//set size (optional)
                img.onload = function (el)
                {
                    var elem = document.createElement('canvas');//create a canvas

                    //scale the image to 600 (width) and keep aspect ratio
                    var scaleFactor = resize_width / el.target.width;
                    elem.width = resize_width;
                    elem.height = el.target.height * scaleFactor;

                    //draw in canvas
                    var ctx = elem.getContext('2d');
                    ctx.drawImage(el.target, 0, 0, elem.width, elem.height);

                    //get the base64-encoded Data URI from the resize image
                    var srcEncoded = ctx.canvas.toDataURL(el.target, 'image/jpeg', 0);

                    //assign it to thumb src
                    //document.querySelector('#image').src = srcEncoded;

                    /*Now you can send "srcEncoded" to the server and
                    convert it to a png o jpg. Also can send
                    "el.target.name" that is the file's name.*/

                    HandleUploadTask(file, srcEncoded);
                }
            }
        }

        function HandleUploadTask(file, srcEncoded)
        {
            var extension = file.name.split('.')[1];
            extension = "jpg";

            // Create a root reference
            var storageRef = firebase.storage().ref();
            //var uploadTask = storageRef.child('@ViewBag.firebaseUid' + '/requestPaymentConfirmation_' + modelID + '.' + extension).put(file);
            var uploadTask = storageRef.child('@ViewBag.firebaseUid' + '/requestPaymentConfirmation_.' + modelID + '.' + extension).putString(srcEncoded, 'data_url');

            // Listen for state changes, errors, and completion of the upload.
            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                function (snapshot)
                {
                    //// Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                    //var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    //console.log('Upload is ' + progress + '% done');
                    //switch (snapshot.state)
                    //{
                    //    case firebase.storage.TaskState.PAUSED: // or 'paused'
                    //        console.log('Upload is paused');
                    //        break;
                    //    case firebase.storage.TaskState.RUNNING: // or 'running'
                    //        console.log('Upload is running');
                    //        break;
                    //}
                }, function (error)
                {
                    $("#" + spinnerTagID).hide();
                    console.log(error);

                }, function ()
                {
                    // Upload completed successfully, now we can get the download URL
                    var attachment = {
                        Filename: "",
                        Path: "",
                        Size: 0,
                        ContentType: "",
                        DownloadUrl: "",
                        FileType: fileType,
                        ModelID: @Model.ID
                    };
                    //console.log(uploadTask.snapshot.ref);
                        

                    uploadTask.snapshot.ref.getMetadata().then(function (metaData)
                    {
                        //console.log(metaData);

                        attachment.Filename = metaData.name;
                        attachment.Path = metaData.fullPath;
                        attachment.Size = metaData.size;
                        attachment.ContentType = metaData.contentType;

                        uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL)
                        {
                            attachment.DownloadUrl = downloadURL;

                            //console.log(attachment);
                            FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID);
                        });
                    });
                });
        }

        function FileAjaxUpload2(input, file, attachment, spinnerTagID, imgPreviewContainerTagID)
        {
            if (file)
            {
                //console.log(attachment);
                $.ajax({
                    url: "/Attachment/Save",
                    data: JSON.stringify(attachment),
                    processData: false,
                    contentType: "application/json; charset=utf-8",
                    type: "POST",
                    //dataType: "json",
                    beforeSend: function ()
                    {
                        //alert("beforeSend");
                        //$("#" + spinnerTagID).show();
                        //$("#imgInp").attr("disabled", "disabled");
                        $(input).attr("disabled", "disabled");
                    },
                    success: function (data)
                    {
                        if (imgPreviewContainerTagID != undefined
                            || imgPreviewContainerTagID != null
                            || imgPreviewContainerTagID != "")
                        {
                            var reader = new FileReader();
                            reader.onload = function (e)
                            {
                                $("#" + imgPreviewContainerTagID).attr('src', e.target.result);
                                $("#" + imgPreviewContainerTagID).show();
                            }
                            reader.readAsDataURL(file);

                            location.reload();
                        }
                        else
                        {
                            alert("File uploaded!");
                        }
                    },
                    error: function (data)
                    {
                        alert("Error!");
                    },
                    complete: function ()
                    {
                        $("#" + spinnerTagID).hide();
                        $(input).removeAttr("disabled");
                    }
                });
            }
        }

        function CancelRequest(requestID)
        {
            if (!confirm("@Html.Raw(localizer["CancelOrderConfirmationText"])"))
                return;

            $.ajax({
                type: "POST",
                url: "/VideoRequest/Cancel?id=" + requestID,
                //data: {
                //    id: requestID
                //},
                //data: JSON.stringify({
                //    id: requestID
                //}),
                contentType: "application/json; charset=utf-8",
                //dataType: "json",
                beforeSend: function (data)
                {
                    $(".btn").attr("disabled", "disabled");
                },
                success: function (data)
                {
                    //alert("success");
                    //alert(data);
                    location.reload();
                },
                error: function (data)
                {
                    alert("Ajax error (status code = " + data.status + "): " + data.statusText);
                },
                complete: function (data)
                {
                    //alert("completed");
                    $(".btn").removeAttr("disabled");
                }
            });
        }

            //function MakePayment(requestID)
            //{
            //    $(".btn").attr("disabled", "disabled");

            //    $.ajax({
            //        type: "POST",
            //        url: "/VideoRequest/MakePayment?id=" + requestID,
            //        //data: {
            //        //    id: requestID
            //        //},
            //        //data: JSON.stringify({
            //        //    id: requestID
            //        //}),
            //        contentType: "application/json; charset=utf-8",
            //        //dataType: "json",
            //        success: function (data)
            //        {
            //            //alert("success");
            //            //alert(data);
            //        },
            //        error: function (data)
            //        {
            //            //alert("error");
            //            console.log(data);
            //        },
            //        complete: function (data)
            //        {
            //            //alert("completed");
            //            $(".btn").removeAttr("disabled");
            //        }
            //    });
            //}
    </script>
}